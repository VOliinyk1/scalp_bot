#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è
"""

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.cache import trading_cache, CACHE_TTL
from app.services.smart_money import get_smart_money_signal

def test_cache_basic():
    """–¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–µ—à—É"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∫–µ—à—É...")
    
    # –¢–µ—Å—Ç 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    test_data = {"test": "data", "number": 42}
    trading_cache.set(test_data, 60, "test", key="value")
    
    cached_data = trading_cache.get("test", key="value")
    if cached_data == test_data:
        print("‚úÖ –¢–µ—Å—Ç 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è - –£–°–ü–Ü–®–ù–û")
    else:
        print("‚ùå –¢–µ—Å—Ç 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è - –ü–û–ú–ò–õ–ö–ê")
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TTL
    trading_cache.set(test_data, 1, "test_ttl", key="value")  # 1 —Å–µ–∫—É–Ω–¥–∞
    time.sleep(2)  # –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏
    
    cached_data = trading_cache.get("test_ttl", key="value")
    if cached_data is None:
        print("‚úÖ –¢–µ—Å—Ç 2: TTL (–∑–∞—Å—Ç–∞—Ä—ñ–Ω–Ω—è) - –£–°–ü–Ü–®–ù–û")
    else:
        print("‚ùå –¢–µ—Å—Ç 2: TTL (–∑–∞—Å—Ç–∞—Ä—ñ–Ω–Ω—è) - –ü–û–ú–ò–õ–ö–ê")

def test_cache_performance():
    """–¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É"""
    print("\n‚ö° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–µ—à—É...")
    
    symbol = "BTCUSDT"
    
    # –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç (–±–µ–∑ –∫–µ—à—É)
    start_time = time.time()
    result1 = get_smart_money_signal(symbol)
    time1 = time.time() - start_time
    
    # –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç (–∑ –∫–µ—à—É)
    start_time = time.time()
    result2 = get_smart_money_signal(symbol)
    time2 = time.time() - start_time
    
    print(f"‚è±Ô∏è –ß–∞—Å –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Ç—É: {time1:.3f} —Å–µ–∫")
    print(f"‚è±Ô∏è –ß–∞—Å –¥—Ä—É–≥–æ–≥–æ –∑–∞–ø–∏—Ç—É: {time2:.3f} —Å–µ–∫")
    
    if time2 > 0:
        print(f"üöÄ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {time1/time2:.1f}x")
    else:
        print("üöÄ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: ‚àû (–º–≥–Ω–æ–≤–µ–Ω–Ω–∏–π –∫–µ—à)")
    
    if time2 < time1 * 0.5:  # –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç –º–∞—î –±—É—Ç–∏ –∑–Ω–∞—á–Ω–æ —à–≤–∏–¥—à–∏–º
        print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É - –£–°–ü–Ü–®–ù–û")
    else:
        print("‚ùå –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É - –ü–û–ú–ò–õ–ö–ê")

def test_cache_stats():
    """–¢–µ—Å—Ç—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É"""
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É...")
    
    # –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è —á–∏—Å—Ç–∏—Ö —Ç–µ—Å—Ç—ñ–≤
    trading_cache.clear()
    
    # –†–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
    for i in range(3):
        get_smart_money_signal("BTCUSDT")
        get_smart_money_signal("ETHUSDT")
    
    stats = trading_cache.get_stats()
    
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É:")
    print(f"   –ó–∞–ø–∏—Ç–∏: {stats['total_requests']}")
    print(f"   –ü–æ–ø–∞–¥–∞–Ω–Ω—è: {stats['hits']}")
    print(f"   –ü—Ä–æ–º–∞—Ö–∏: {stats['misses']}")
    print(f"   –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {stats['hit_rate']:.1%}")
    print(f"   –†–æ–∑–º—ñ—Ä: {stats['size']} –∑–∞–ø–∏—Å—ñ–≤")
    
    if stats['hit_rate'] > 0:
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É - –£–°–ü–Ü–®–ù–û")
    else:
        print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É - –ü–û–ú–ò–õ–ö–ê")

def test_cache_cleanup():
    """–¢–µ—Å—Ç—É—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É"""
    print("\nüßπ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É...")
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    for i in range(10):
        trading_cache.set(f"data_{i}", 3600, "test_cleanup", index=i)
    
    initial_size = len(trading_cache._cache)
    print(f"üì¶ –†–æ–∑–º—ñ—Ä –∫–µ—à—É –¥–æ –æ—á–∏—â–µ–Ω–Ω—è: {initial_size}")
    
    # –û—á–∏—â–∞—î–º–æ –∫–µ—à
    trading_cache.clear()
    
    final_size = len(trading_cache._cache)
    print(f"üì¶ –†–æ–∑–º—ñ—Ä –∫–µ—à—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è: {final_size}")
    
    if final_size == 0:
        print("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É - –£–°–ü–Ü–®–ù–û")
    else:
        print("‚ùå –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É - –ü–û–ú–ò–õ–ö–ê")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è")
    print("=" * 50)
    
    try:
        test_cache_basic()
        test_cache_performance()
        test_cache_stats()
        test_cache_cleanup()
        
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")

if __name__ == "__main__":
    main()
