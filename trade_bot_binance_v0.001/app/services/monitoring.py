# app/services/monitoring.py
"""
–ú–æ–¥—É–ª—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–í—ñ–¥—Å—Ç–µ–∂—É—î —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–¥—ñ—ó
"""

import asyncio
import logging
import json
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from dataclasses import asdict
import requests

from app.services.risk_management import get_risk_manager, RiskLevel
from app.services.cache import trading_cache
from app.config import TELEGRAM_BOT_TOKEN

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MonitoringService:
    """–°–µ—Ä–≤—ñ—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    
    def __init__(self):
        self.risk_manager = get_risk_manager()
        self.telegram_token = TELEGRAM_BOT_TOKEN
        self.alert_history: List[Dict] = []
        self.is_running = False
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
        self.alert_config = {
            "risk_levels": {
                RiskLevel.LOW: {"telegram": False, "email": False},
                RiskLevel.MEDIUM: {"telegram": True, "email": False},
                RiskLevel.HIGH: {"telegram": True, "email": True},
                RiskLevel.CRITICAL: {"telegram": True, "email": True}
            },
            "check_interval": 60,  # —Å–µ–∫—É–Ω–¥–∏
            "max_alerts_per_hour": 10
        }
    
    async def start_monitoring(self):
        """
        –ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        """
        if self.is_running:
            logger.warning("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
            return
        
        self.is_running = True
        logger.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        await asyncio.gather(
            self._risk_monitoring_loop(),
            self._system_health_loop(),
            self._performance_monitoring_loop()
        )
    
    async def stop_monitoring(self):
        """
        –ó—É–ø–∏–Ω—è—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        """
        self.is_running = False
        logger.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–∏–π")
    
    async def _risk_monitoring_loop(self):
        """
        –¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–∏–∑–∏–∫—ñ–≤
        """
        while self.is_running:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏–∑–∏–∫—É
                risk_metrics = self.risk_manager.get_risk_metrics()
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É
                risk_level = self._analyze_risk_level(risk_metrics)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                if self._should_send_alert(risk_level):
                    await self._send_risk_alert(risk_level, risk_metrics)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω—å
                self._save_alert_history(risk_level, risk_metrics)
                
                await asyncio.sleep(self.alert_config["check_interval"])
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–∏–∑–∏–∫—ñ–≤: {e}")
                await asyncio.sleep(120)
    
    async def _system_health_loop(self):
        """
        –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
        """
        while self.is_running:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
                api_health = await self._check_api_health()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                db_health = await self._check_database_health()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –∫–µ—à—É
                cache_health = await self._check_cache_health()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º–∏
                if not all([api_health, db_health, cache_health]):
                    await self._send_system_alert(api_health, db_health, cache_health)
                
                await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏: {e}")
                await asyncio.sleep(600)
    
    async def _performance_monitoring_loop(self):
        """
        –¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        """
        while self.is_running:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
                cache_stats = trading_cache.get_stats()
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                performance_metrics = self._analyze_performance(cache_stats)
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if self._should_send_performance_report():
                    await self._send_performance_report(performance_metrics)
                
                await asyncio.sleep(3600)  # –ó–≤—ñ—Ç –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
                await asyncio.sleep(7200)
    
    def _analyze_risk_level(self, risk_metrics) -> RiskLevel:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç—Ä–∏–∫
        """
        # –ö—Ä–∏—Ç–∏—á–Ω—ñ —É–º–æ–≤–∏
        if (risk_metrics.total_exposure > self.risk_manager.config.max_total_exposure_usdt * 0.9 or
            risk_metrics.daily_pnl < -self.risk_manager.config.max_daily_loss_usdt * 0.9 or
            risk_metrics.max_drawdown > self.risk_manager.config.max_drawdown_percent * 0.9):
            return RiskLevel.CRITICAL
        
        # –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫
        if (risk_metrics.total_exposure > self.risk_manager.config.max_total_exposure_usdt * 0.7 or
            risk_metrics.daily_pnl < -self.risk_manager.config.max_daily_loss_usdt * 0.7 or
            risk_metrics.max_drawdown > self.risk_manager.config.max_drawdown_percent * 0.7):
            return RiskLevel.HIGH
        
        # –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫
        if (risk_metrics.total_exposure > self.risk_manager.config.max_total_exposure_usdt * 0.5 or
            risk_metrics.daily_pnl < -self.risk_manager.config.max_daily_loss_usdt * 0.5 or
            risk_metrics.max_drawdown > self.risk_manager.config.max_drawdown_percent * 0.5):
            return RiskLevel.MEDIUM
        
        return RiskLevel.LOW
    
    def _should_send_alert(self, risk_level: RiskLevel) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç —Å–ø–æ–≤—ñ—â–µ–Ω—å
        recent_alerts = [
            alert for alert in self.alert_history 
            if datetime.utcnow() - alert["timestamp"] < timedelta(hours=1)
        ]
        
        if len(recent_alerts) >= self.alert_config["max_alerts_per_hour"]:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–≤–Ω—è —Ä–∏–∑–∏–∫—É
        return self.alert_config["risk_levels"][risk_level]["telegram"]
    
    async def _send_risk_alert(self, risk_level: RiskLevel, risk_metrics):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫
        """
        try:
            message = self._format_risk_alert(risk_level, risk_metrics)
            
            if self.alert_config["risk_levels"][risk_level]["telegram"]:
                await self._send_telegram_message(message)
            
            logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {risk_level.value}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫: {e}")
    
    def _format_risk_alert(self, risk_level: RiskLevel, risk_metrics) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫
        """
        emoji_map = {
            RiskLevel.LOW: "üü¢",
            RiskLevel.MEDIUM: "üü°", 
            RiskLevel.HIGH: "üü†",
            RiskLevel.CRITICAL: "üî¥"
        }
        
        message = f"""
{emoji_map[risk_level]} **–°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –†–ò–ó–ò–ö: {risk_level.value}**

üìä **–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏–∑–∏–∫—É:**
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –µ–∫—Å–ø–æ–∑–∏—Ü—ñ—è: {risk_metrics.total_exposure:.2f} USDT
‚Ä¢ –î–µ–Ω–Ω–∏–π P&L: {risk_metrics.daily_pnl:.2f} USDT
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞: {risk_metrics.max_drawdown:.2f}%
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {risk_metrics.volatility:.4f}

‚è∞ –ß–∞—Å: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
        """
        
        return message.strip()
    
    async def _send_system_alert(self, api_health: bool, db_health: bool, cache_health: bool):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        """
        try:
            message = self._format_system_alert(api_health, db_health, cache_health)
            await self._send_telegram_message(message)
            
            logger.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏: {e}")
    
    def _format_system_alert(self, api_health: bool, db_health: bool, cache_health: bool) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        """
        status_emoji = lambda x: "‚úÖ" if x else "‚ùå"
        
        message = f"""
üîß **–°–¢–ê–ù –°–ò–°–¢–ï–ú–ò**

{status_emoji(api_health)} Binance API: {"–û–Ω–ª–∞–π–Ω" if api_health else "–û—Ñ–ª–∞–π–Ω"}
{status_emoji(db_health)} –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {"–û–Ω–ª–∞–π–Ω" if db_health else "–û—Ñ–ª–∞–π–Ω"}
{status_emoji(cache_health)} –ö–µ—à: {"–û–Ω–ª–∞–π–Ω" if cache_health else "–û—Ñ–ª–∞–π–Ω"}

‚è∞ –ß–∞—Å: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
        """
        
        return message.strip()
    
    async def _send_performance_report(self, performance_metrics: Dict):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        """
        try:
            message = self._format_performance_report(performance_metrics)
            await self._send_telegram_message(message)
            
            logger.info("–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {e}")
    
    def _format_performance_report(self, performance_metrics: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        """
        message = f"""
üìà **–ó–í–Ü–¢ –ü–†–û –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨**

üéØ **–ö–µ—à:**
‚Ä¢ Hit Rate: {performance_metrics.get('hit_rate', 0):.1%}
‚Ä¢ –†–æ–∑–º—ñ—Ä: {performance_metrics.get('size', 0)} –∑–∞–ø–∏—Å—ñ–≤
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏: {performance_metrics.get('total_requests', 0)}

‚ö° **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {performance_metrics.get('uptime', 'N/A')}
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {performance_metrics.get('memory_usage', 'N/A')}

‚è∞ –ß–∞—Å: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
        """
        
        return message.strip()
    
    async def _send_telegram_message(self, message: str):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        """
        if not self.telegram_token:
            logger.warning("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return
        
        try:
            # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ chat_id –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.info(f"Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
            
            # –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API
            # url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            # data = {
            #     "chat_id": "YOUR_CHAT_ID",
            #     "text": message,
            #     "parse_mode": "Markdown"
            # }
            # response = requests.post(url, json=data)
            # response.raise_for_status()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    async def _check_api_health(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Binance API
        """
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É API
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API: {e}")
            return False
    
    async def _check_database_health(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ë–î
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    async def _check_cache_health(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –∫–µ—à—É
        """
        try:
            stats = trading_cache.get_stats()
            return stats["size"] < 1000  # –ö–µ—à –Ω–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–µ—à—É: {e}")
            return False
    
    def _analyze_performance(self, cache_stats: Dict) -> Dict:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏
        """
        return {
            "hit_rate": cache_stats.get("hit_rate", 0),
            "size": cache_stats.get("size", 0),
            "total_requests": cache_stats.get("total_requests", 0),
            "uptime": "24h",  # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏
            "memory_usage": "512MB"  # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
        }
    
    def _should_send_performance_report(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        """
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        return True
    
    def _save_alert_history(self, risk_level: RiskLevel, risk_metrics):
        """
        –ó–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω—å
        """
        alert = {
            "risk_level": risk_level.value,
            "risk_metrics": asdict(risk_metrics),
            "timestamp": datetime.utcnow()
        }
        
        self.alert_history.append(alert)
        
        # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó
        if len(self.alert_history) > 1000:
            self.alert_history = self.alert_history[-1000:]
    
    def get_alert_history(self, hours: int = 24) -> List[Dict]:
        """
        –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –≥–æ–¥–∏–Ω
        """
        cutoff_time = datetime.utcnow() - timedelta(hours=hours)
        return [
            alert for alert in self.alert_history 
            if alert["timestamp"] >= cutoff_time
        ]
    
    def get_system_status(self) -> Dict:
        """
        –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        """
        try:
            risk_metrics = self.risk_manager.get_risk_metrics()
            risk_level = self._analyze_risk_level(risk_metrics)
            cache_stats = trading_cache.get_stats()
            
            return {
                "risk_level": risk_level.value,
                "risk_metrics": asdict(risk_metrics),
                "cache_stats": cache_stats,
                "uptime": "24h",
                "last_check": datetime.utcnow().isoformat()
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏: {e}")
            return {"error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
monitoring_service = MonitoringService()

def get_monitoring_service() -> MonitoringService:
    """–û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return monitoring_service
