# app/telegram_bot.py
import os
import asyncio
import requests
from html import escape as h
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ø–µ—Ä–µ–≤—ñ—Ä, —â–æ –∑–º—ñ–Ω–Ω–∞ —Ç–∞–∫–∞ –∂ —É .env
FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")

# HTML-—Ä–µ–∂–∏–º –±–µ–∑–ø–µ—á–Ω—ñ—à–∏–π –∑–∞ Markdown (–º–µ–Ω—à–µ –ø—Ä–æ–±–ª–µ–º –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º)
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

@dp.message_handler(commands=["start", "help"])
async def start_handler(message: types.Message):
    help_text = """
ü§ñ <b>–¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç - –ö–æ–º–∞–Ω–¥–∏</b>

üìà <b>AI –°–∏–≥–Ω–∞–ª–∏</b>:
<code>/ai_signal SYMBOL</code> - –ü–æ–≤–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑
–ü—Ä–∏–∫–ª–∞–¥: <code>/ai_signal BTCUSDT</code>

üß† <b>Smart Money</b>:
<code>/smart_money SYMBOL</code> - Smart Money –∞–Ω–∞–ª—ñ–∑
–ü—Ä–∏–∫–ª–∞–¥: <code>/smart_money ETHUSDT</code>

üóÇ <b>–Ü—Å—Ç–æ—Ä—ñ—è</b>:
<code>/last SYMBOL</code> - –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª
–ü—Ä–∏–∫–ª–∞–¥: <code>/last BTCUSDT</code>

‚ö° <b>–ö–µ—à</b>:
<code>/cache_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É
<code>/cache_clear</code> - –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∏</b>: BTCUSDT, ETHUSDT, BNBUSDT, ADAUSDT, DOTUSDT
    """
    await message.answer(help_text)

@dp.message_handler(commands=["ai_signal"])
async def ai_signal_handler(message: types.Message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            return await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/ai_signal &lt;SYMBOL&gt;</code>")

        symbol = parts[1].upper()
        resp = requests.get(f"{FASTAPI_URL}/signal/{symbol}", timeout=40)
        if resp.status_code != 200:
            return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª")

        data = resp.json()

        # –∑–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –±–µ–∫–µ–Ω–¥—É
        if data.get("final_signal") == "ERROR":
            err = h(str(data.get("error", "Unknown error")))
            return await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–µ–∫–µ–Ω–¥—É: <i>{err}</i>")

        # –ø–æ–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        final_signal = data.get("final_signal", "HOLD")
        weights = data.get("weights", {}) or {}
        details = data.get("details", {}) or {}

        # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –æ–±–æ—Ö –∫–ª—é—á—ñ–≤: gpt_sentiment / gtp_sentiment
        gpt = details.get("gpt_sentiment") or details.get("gtp_sentiment") or {}
        smart = details.get("smart_money", {}) or {}

        # –æ–ø—Ü—ñ–π–Ω—ñ –±–ª–æ–∫–∏ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–µ—Ä—Å—ñ—ó ai_signals)
        tf = details.get("tf", {}) or {}
        regime = details.get("regime", {}) or {}

        # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        reply = f"üìà <b>{h(symbol)}</b>\n" \
                f"–°–∏–≥–Ω–∞–ª: <b>{h(str(final_signal))}</b>\n"

        # –≤–∞–≥–∏
        if weights:
            reply += (
                "\n‚öñÔ∏è <b>–í–∞–≥–∏</b>: "
                f"BUY <code>{weights.get('BUY', 0):.2f}</code> ¬∑ "
                f"SELL <code>{weights.get('SELL', 0):.2f}</code> ¬∑ "
                f"HOLD <code>{weights.get('HOLD', 0):.2f}</code>\n"
            )

        # —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑: –∫–æ—Ä–æ—Ç–∫–æ (—è–∫—â–æ —î –ª–∏—à–µ 'tech'), –∞–±–æ multi-TF (—è–∫—â–æ —î 'tf')
        tech_signal = details.get("tech")
        if tech_signal:
            reply += f"\nüìä <b>–¢–µ—Ö–∞–Ω–∞–ª—ñ–∑</b>: <code>{h(str(tech_signal))}</code>\n"

        if tf:
            def tf_line(name: str) -> str:
                d = tf.get(name, {}) or {}
                sig = h(str(d.get("signal", "-")))
                rz = d.get("rsi_z")
                extras = []
                if isinstance(rz, (int, float)):
                    extras.append(f"rsi_z=<code>{rz:.2f}</code>")
                if d.get("vol_spike"):
                    extras.append("vol_spike=<code>True</code>")
                extra = (" | " + " ".join(extras)) if extras else ""
                return f"‚è± <b>{h(name)}</b>: {sig}{extra}"
            reply += (
                "\nüß≠ <b>Multi-TF</b>:\n"
                + tf_line("5m") + "\n"
                + tf_line("15m") + "\n"
                + tf_line("1h") + "\n"
            )

        # —Ä–µ–∂–∏–º —Ä–∏–Ω–∫—É
        if regime:
            label = h(str(regime.get("label", "-")))
            adx = regime.get("adx")
            atrp = regime.get("atr_pct")
            reg_line = f"üó∫ <b>–†–µ–∂–∏–º</b>: {label}"
            if isinstance(adx, (int, float)):
                reg_line += f" | ADX <code>{adx:.2f}</code>"
            if isinstance(atrp, (int, float)):
                reg_line += f" | ATR% <code>{atrp:.4f}</code>"
            reply += reg_line + "\n"

        # smart money
        if smart:
            sm_sig = h(str(smart.get("signal", "-")))
            sm_conf = smart.get("confidence")
            src = h(str(smart.get("source", "-")))
            reply += "üíº <b>Smart Money</b>: " \
                     f"{sm_sig} (conf=<code>{sm_conf if sm_conf is not None else '-'}</code>) ¬∑ " \
                     f"src=<code>{src}</code>\n"

        # gpt sentiment
        if gpt:
            gsig = h(str(gpt.get("signal", "-")))
            gpt_msg = h(str(gpt.get("raw", "-")))
            reply += f"üß† <b>GPT</b>: {gsig}"
            reply += f"\n{gpt_msg}"
            if gpt.get("error"):
                reply += f"\n‚ö†Ô∏è <i>{h(str(gpt['error']))}</i>"

        await message.answer(reply)

    except Exception as e:
        await message.answer(f"‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: <i>{h(str(e))}</i>")

# –∑–∞–ø—É—Å–∫ —É –ø–æ—Ç–æ—Ü—ñ –∑ FastAPI
def start_telegram_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    executor.start_polling(dp, skip_updates=True)

# app/telegram_bot.py (–¥–æ–¥–∞–π)
@dp.message_handler(commands=["last"])
async def last_signal_handler(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/last &lt;SYMBOL&gt;</code>")
    symbol = parts[1].upper()
    try:
        r = requests.get(f"{FASTAPI_URL}/signals/latest/{symbol}", timeout=10)
        if r.status_code != 200:
            return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        data = r.json()
        if not data.get("final_signal"):
            return await message.answer(f"‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è {symbol}")
        await message.answer(
            f"üóÇ <b>–û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª {symbol}</b>\n"
            f"–°–∏–≥–Ω–∞–ª: <b>{data['final_signal']}</b>\n"
            f"–ß–∞—Å: <code>{data['created_at']}</code>"
        )
    except Exception as e:
        await message.answer(f"‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: <i>{e}</i>")

@dp.message_handler(commands=["smart_money"])
async def smart_money_handler(message: types.Message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            return await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/smart_money &lt;SYMBOL&gt;</code>")

        symbol = parts[1].upper()
        resp = requests.get(f"{FASTAPI_URL}/smart_money/{symbol}", timeout=60)
        if resp.status_code != 200:
            return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª")

        data = resp.json()

        if not data.get("success", True):
            err = h(str(data.get("error", "Unknown error")))
            return await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ Smart Money: <i>{err}</i>")

        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        reply = f"üß† <b>Smart Money: {h(symbol)}</b>\n"
        reply += f"–°–∏–≥–Ω–∞–ª: <b>{h(data['signal'])}</b>\n"
        reply += f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: <code>{data['confidence']:.3f}</code>\n\n"
        
        reply += f"üìä <b>–ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ</b>:\n"
        reply += f"BUY: <code>{data['p_buy']:.3f}</code>\n"
        reply += f"SELL: <code>{data['p_sell']:.3f}</code>\n\n"
        
        reply += f"‚öñÔ∏è <b>–Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏</b>:\n"
        reply += f"–î–∏—Å–±–∞–ª–∞–Ω—Å –æ—Ä–¥–µ—Ä–±—É–∫–∞: <code>{data['ob_imbalance']:.4f}</code>\n"
        reply += f"–¢–æ–ø-—Ç—Ä–µ–π–¥–µ—Ä–∏: <code>{data['top_traders_ratio']:.3f}</code>\n"
        reply += f"–°–µ–Ω—Ç–∏–º–µ–Ω—Ç –Ω–æ–≤–∏–Ω: <code>{data['news_sentiment']:.3f}</code>\n"
        reply += f"–¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{data['timeframe']}</code>"

        await message.answer(reply)

    except Exception as e:
        await message.answer(f"‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: <i>{h(str(e))}</i>")


@dp.message_handler(commands=["cache_stats"])
async def cache_stats_handler(message: types.Message):
    try:
        resp = requests.get(f"{FASTAPI_URL}/cache/stats", timeout=10)
        if resp.status_code != 200:
            return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        
        data = resp.json()
        if not data.get("success"):
            return await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {data.get('error', 'Unknown error')}")
        
        stats = data["stats"]
        reply = f"‚ö° <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É</b>\n\n"
        reply += f"üìä <b>–ó–∞–ø–∏—Ç–∏</b>:\n"
        reply += f"–í—Å—å–æ–≥–æ: <code>{stats['total_requests']}</code>\n"
        reply += f"–ü–æ–ø–∞–¥–∞–Ω–Ω—è: <code>{stats['hits']}</code>\n"
        reply += f"–ü—Ä–æ–º–∞—Ö–∏: <code>{stats['misses']}</code>\n"
        reply += f"–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: <code>{stats['hit_rate']:.1%}</code>\n\n"
        reply += f"üíæ <b>–†–æ–∑–º—ñ—Ä</b>: <code>{stats['size']}</code> –∑–∞–ø–∏—Å—ñ–≤\n"
        reply += f"üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–æ</b>: <code>{stats['evictions']}</code> –∑–∞–ø–∏—Å—ñ–≤"
        
        await message.answer(reply)
        
    except Exception as e:
        await message.answer(f"‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: <i>{h(str(e))}</i>")

@dp.message_handler(commands=["cache_clear"])
async def cache_clear_handler(message: types.Message):
    try:
        resp = requests.post(f"{FASTAPI_URL}/cache/clear", timeout=10)
        if resp.status_code != 200:
            return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        
        data = resp.json()
        if not data.get("success"):
            return await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {data.get('error', 'Unknown error')}")
        
        await message.answer("‚úÖ –ö–µ—à —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!")
        
    except Exception as e:
        await message.answer(f"‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: <i>{h(str(e))}</i>")

# —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –æ–∫—Ä–µ–º–æ:
# if __name__ == "__main__":
#     start_telegram_bot()
