# app/telegram_bot.py

import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from dotenv import load_dotenv

from app.ai_signals import detect_signal

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.reply("üëã –í—ñ—Ç–∞—é! –Ø —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç. –ù–∞–ø–∏—à–∏ /signal ETHUSDT —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª.")

@dp.message_handler(commands=["signal"])
async def signal_cmd(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /signal SYMBOL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /signal BTCUSDT)")
            return

        symbol = parts[1].upper()
        result = detect_signal(symbol)

        if result["signal"] == "ERROR":
            await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
        else:
            msg = (
                f"üìä <b>{symbol}</b>\n"
                f"üí° –°–∏–≥–Ω–∞–ª: <b>{result['signal']}</b>\n"
                f"üìà RSI: {result['rsi']}\n"
                f"üìä MACD: {result['macd']} / {result['macd_signal']}\n"
                f"üîç –ü—Ä–∏—á–∏–Ω–∏:\n"
                + "\n".join([f"‚Ä¢ {r}" for r in result["reasons"]]) +
                f"\n\nüß† Confidence: {int(result['confidence'] * 100)}%"
            )
            await message.reply(msg, parse_mode=ParseMode.HTML)

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

def start_telegram_bot():
    executor.start_polling(dp, skip_updates=True)
