#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Smart Money –º–æ–¥—É–ª—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.smart_money import get_smart_money_signal, analyze_top_traders

def test_smart_money():
    """–¢–µ—Å—Ç—É—î–º–æ Smart Money –∞–Ω–∞–ª—ñ–∑"""
    print("üß† –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Smart Money –º–æ–¥—É–ª—è...")
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
    
    for symbol in symbols:
        print(f"\nüìä –¢–µ—Å—Ç—É—î–º–æ {symbol}:")
        
        try:
            # –¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            result = get_smart_money_signal(symbol)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['signal']}")
            print(f"   BUY: {result['p_buy']:.3f}")
            print(f"   SELL: {result['p_sell']:.3f}")
            print(f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {result['confidence']:.3f}")
            
            # –¢–µ—Å—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è ai_signals
            ai_result = analyze_top_traders(symbol)
            print(f"   AI —Ñ–æ—Ä–º–∞—Ç: {ai_result['signal']} (conf: {ai_result['confidence']})")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_smart_money()
