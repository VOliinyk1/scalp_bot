#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏: —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, —Ç–æ—Ä–≥–æ–≤–∏–π –¥–≤–∏–≥—É–Ω, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥, –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
"""

import requests
import json
import time
import asyncio
from datetime import datetime
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ë–∞–∑–æ–≤–∏–π URL API
BASE_URL = "http://localhost:8000"

def print_header(title):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó"""
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print(f"{'='*60}")

def print_section(title):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—ñ–¥—Å–µ–∫—Ü—ñ—ó"""
    print(f"\nüìã {title}")
    print("-" * 40)

def test_api_endpoint(endpoint, method="GET", data=None, description=""):
    """–¢–µ—Å—Ç—É—î API –µ–Ω–¥–ø–æ—ñ–Ω—Ç"""
    try:
        url = f"{BASE_URL}{endpoint}"
        
        if method == "GET":
            response = requests.get(url, timeout=10)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=10)
        
        print(f"‚úÖ {description}")
        print(f"   URL: {url}")
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if "success" in result and result["success"]:
                print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        else:
            print(f"   ‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
            
        return response.status_code == 200
        
    except requests.exceptions.ConnectionError:
        print(f"‚ùå {description}")
        print(f"   –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {url}")
        print(f"   –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ {BASE_URL}")
        return False
    except Exception as e:
        print(f"‚ùå {description}")
        print(f"   –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return False

def test_risk_management():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –†–ò–ó–ò–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–£")
    
    # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É
    test_api_endpoint(
        "/risk/metrics",
        description="–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É"
    )
    
    # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É–≥–æ–¥–∏
    test_api_endpoint(
        "/risk/validate-trade?symbol=BTCUSDT&side=BUY&quantity=0.001&price=45000",
        description="–í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–≥–æ–¥–∏"
    )
    
    # –¢–µ—Å—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
    test_api_endpoint(
        "/risk/position-size/BTCUSDT?entry_price=45000&account_balance=10000",
        description="–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó"
    )
    
    # –¢–µ—Å—Ç Stop Loss
    test_api_endpoint(
        "/risk/stop-loss/BTCUSDT?entry_price=45000&side=BUY",
        description="–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Stop Loss"
    )
    
    # –¢–µ—Å—Ç Take Profit
    test_api_endpoint(
        "/risk/take-profit/BTCUSDT?entry_price=45000&side=BUY",
        description="–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Take Profit"
    )

def test_trading_engine():
    """–¢–µ—Å—Ç—É—î —Ç–æ—Ä–≥–æ–≤–∏–π –¥–≤–∏–≥—É–Ω"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–û–†–ì–û–í–û–ì–û –î–í–ò–ì–£–ù–ê")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É
    test_api_endpoint(
        "/trading/status",
        description="–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞"
    )
    
    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫—É
    test_api_endpoint(
        "/trading/start",
        method="POST",
        data={"trading_pairs": ["BTCUSDT", "ETHUSDT"]},
        description="–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞"
    )
    
    # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏
    time.sleep(2)
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
    test_api_endpoint(
        "/trading/status",
        description="–°—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É"
    )
    
    # –¢–µ—Å—Ç –∑—É–ø–∏–Ω–∫–∏
    test_api_endpoint(
        "/trading/stop",
        method="POST",
        description="–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞"
    )

def test_monitoring():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    test_api_endpoint(
        "/monitoring/status",
        description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
    )
    
    # –¢–µ—Å—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ø–æ–≤—ñ—â–µ–Ω—å
    test_api_endpoint(
        "/monitoring/alerts?hours=24",
        description="–Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"
    )
    
    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    test_api_endpoint(
        "/monitoring/start",
        method="POST",
        description="–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
    )
    
    # –¢–µ—Å—Ç –∑—É–ø–∏–Ω–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    test_api_endpoint(
        "/monitoring/stop",
        method="POST",
        description="–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
    )

def test_analytics():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –ê–ù–ê–õ–Ü–¢–ò–ö–ò")
    
    # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    test_api_endpoint(
        "/analytics/quick-stats",
        description="–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    # –¢–µ—Å—Ç –∑–≤—ñ—Ç—É –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    test_api_endpoint(
        "/analytics/performance-report?days=7",
        description="–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (7 –¥–Ω—ñ–≤)"
    )
    
    # –¢–µ—Å—Ç –µ–∫—Å–ø–æ—Ä—Ç—É –∑–≤—ñ—Ç—É
    test_api_endpoint(
        "/analytics/export-report?days=30",
        description="–ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É (30 –¥–Ω—ñ–≤)"
    )

def test_existing_apis():
    """–¢–µ—Å—Ç—É—î —ñ—Å–Ω—É—é—á—ñ API"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–°–ù–£–Æ–ß–ò–• API")
    
    # –¢–µ—Å—Ç –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    test_api_endpoint(
        "/api/health",
        description="Health check"
    )
    
    # –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª—ñ–≤
    test_api_endpoint(
        "/signal/BTCUSDT",
        description="–°–∏–≥–Ω–∞–ª –¥–ª—è BTCUSDT"
    )
    
    # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
    test_api_endpoint(
        "/signals/latest/BTCUSDT",
        description="–û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª –¥–ª—è BTCUSDT"
    )
    
    # –¢–µ—Å—Ç Smart Money
    test_api_endpoint(
        "/smart_money/BTCUSDT",
        description="Smart Money –∞–Ω–∞–ª—ñ–∑"
    )
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
    test_api_endpoint(
        "/cache/stats",
        description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É"
    )

def test_dashboard():
    """–¢–µ—Å—Ç—É—î –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–ï–ë-–Ü–ù–¢–ï–†–§–ï–ô–°–£")
    
    try:
        response = requests.get(f"{BASE_URL}/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Dashboard –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            print(f"   URL: {BASE_URL}/")
            print(f"   Status: {response.status_code}")
        else:
            print(f"‚ùå Dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ dashboard: {str(e)}")

def test_performance():
    """–¢–µ—Å—Ç—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å API"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    
    endpoints = [
        "/risk/metrics",
        "/trading/status",
        "/monitoring/status",
        "/analytics/quick-stats"
    ]
    
    for endpoint in endpoints:
        start_time = time.time()
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            end_time = time.time()
            response_time = (end_time - start_time) * 1000
            
            if response.status_code == 200:
                print(f"‚úÖ {endpoint}: {response_time:.2f}ms")
            else:
                print(f"‚ùå {endpoint}: {response.status_code} ({response_time:.2f}ms)")
        except Exception as e:
            print(f"‚ùå {endpoint}: –ü–æ–º–∏–ª–∫–∞ - {str(e)}")

def test_error_handling():
    """–¢–µ—Å—Ç—É—î –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫"""
    print_header("–¢–ï–°–¢–£–í–ê–ù–ù–Ø –û–ë–†–û–ë–ö–ò –ü–û–ú–ò–õ–û–ö")
    
    # –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
    test_api_endpoint(
        "/signal/INVALID_SYMBOL",
        description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª"
    )
    
    # –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    test_api_endpoint(
        "/risk/validate-trade",
        description="–í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"
    )
    
    # –¢–µ—Å—Ç –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
    try:
        response = requests.get(f"{BASE_URL}/non-existent-endpoint", timeout=5)
        if response.status_code == 404:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 404 –ø–æ–º–∏–ª–∫–∏")
        else:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 404: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è 404: {str(e)}")

def generate_test_report():
    """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print_header("–ó–í–Ü–¢ –ü–†–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "base_url": BASE_URL,
        "tests": {
            "risk_management": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "trading_engine": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", 
            "monitoring": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "analytics": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "existing_apis": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "dashboard": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "performance": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "error_handling": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        },
        "summary": "–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ"
    }
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    for test, status in report["tests"].items():
        print(f"   {test}: {status}")
    
    print(f"\n‚è∞ –ß–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {report['timestamp']}")
    print(f"üåê –ë–∞–∑–æ–≤–∏–π URL: {report['base_url']}")
    
    return report

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    print(f"‚è∞ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤–∏–π URL: {BASE_URL}")
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        test_existing_apis()
        test_risk_management()
        test_trading_engine()
        test_monitoring()
        test_analytics()
        test_dashboard()
        test_performance()
        test_error_handling()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
        report = generate_test_report()
        
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("=" * 60)
        
        print("\nüìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
        print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä —ñ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ http://localhost:8000")
        print("2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º")
        print("3. –ú–æ–Ω—ñ—Ç–æ—Ä—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏")
        print("4. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ config.py")
        print("5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤–∏–π –¥–≤–∏–≥—É–Ω –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ")
        
        print("\n‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û:")
        print("- –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É–π—Ç–µ –Ω–∞ –¥–µ–º–æ-—Ä–∞—Ö—É–Ω–∫—É")
        print("- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É")
        print("- –ú–æ–Ω—ñ—Ç–æ—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ")
        print("- –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8000")

if __name__ == "__main__":
    main()
