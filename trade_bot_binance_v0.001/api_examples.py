#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
"""

import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤–∏–π URL API
BASE_URL = "http://localhost:8000"

def print_response(response, title):
    """–í–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å API –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    print(f"\n{'='*50}")
    print(f"üì° {title}")
    print(f"{'='*50}")
    print(f"Status Code: {response.status_code}")
    print(f"Response:")
    print(json.dumps(response.json(), indent=2, ensure_ascii=False))

def test_risk_management_api():
    """–¢–µ—Å—Ç—É—î API —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É"""
    print("üîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –†–ò–ó–ò–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–£")
    
    # 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É
    response = requests.get(f"{BASE_URL}/risk/metrics")
    print_response(response, "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É")
    
    # 2. –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–≥–æ–¥–∏
    trade_data = {
        "symbol": "BTCUSDT",
        "side": "BUY",
        "quantity": 0.01,
        "price": 45000.0,
        "account_balance": 10000.0
    }
    response = requests.post(f"{BASE_URL}/risk/validate-trade", json=trade_data)
    print_response(response, "–í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–≥–æ–¥–∏")
    
    # 3. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
    response = requests.get(
        f"{BASE_URL}/risk/position-size/BTCUSDT",
        params={"entry_price": 45000, "account_balance": 10000}
    )
    print_response(response, "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó")
    
    # 4. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Stop Loss
    response = requests.get(
        f"{BASE_URL}/risk/stop-loss/BTCUSDT",
        params={"entry_price": 45000, "side": "BUY"}
    )
    print_response(response, "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Stop Loss")
    
    # 5. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Take Profit
    response = requests.get(
        f"{BASE_URL}/risk/take-profit/BTCUSDT",
        params={"entry_price": 45000, "side": "BUY"}
    )
    print_response(response, "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Take Profit")

def test_trading_engine_api():
    """–¢–µ—Å—Ç—É—î API —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞"""
    print("\nüöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –¢–û–†–ì–û–í–û–ì–û –î–í–ò–ì–£–ù–ê")
    
    # 1. –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞
    response = requests.get(f"{BASE_URL}/trading/status")
    print_response(response, "–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞")
    
    # 2. –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞
    trading_pairs = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
    response = requests.post(f"{BASE_URL}/trading/start", json={"trading_pairs": trading_pairs})
    print_response(response, "–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞")
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
    response = requests.get(f"{BASE_URL}/trading/status")
    print_response(response, "–°—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É")
    
    # 4. –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞
    response = requests.post(f"{BASE_URL}/trading/stop")
    print_response(response, "–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞")

def test_monitoring_api():
    """–¢–µ—Å—Ç—É—î API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    print("\nüëÅÔ∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£")
    
    # 1. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
    response = requests.get(f"{BASE_URL}/monitoring/status")
    print_response(response, "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
    
    # 2. –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    response = requests.get(f"{BASE_URL}/monitoring/alerts", params={"hours": 24})
    print_response(response, "–Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å")
    
    # 3. –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    response = requests.post(f"{BASE_URL}/monitoring/start")
    print_response(response, "–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
    
    # 4. –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    response = requests.post(f"{BASE_URL}/monitoring/stop")
    print_response(response, "–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")

def test_existing_api():
    """–¢–µ—Å—Ç—É—î —ñ—Å–Ω—É—é—á—ñ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏"""
    print("\nüìä –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–°–ù–£–Æ–ß–ò–• API")
    
    # 1. –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    response = requests.get(f"{BASE_URL}/")
    print_response(response, "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞")
    
    # 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
    response = requests.get(f"{BASE_URL}/signal/BTCUSDT")
    print_response(response, "–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –¥–ª—è BTCUSDT")
    
    # 3. –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª
    response = requests.get(f"{BASE_URL}/signals/latest/BTCUSDT")
    print_response(response, "–û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª –¥–ª—è BTCUSDT")
    
    # 4. Smart Money —Å–∏–≥–Ω–∞–ª
    response = requests.get(f"{BASE_URL}/smart_money/BTCUSDT")
    print_response(response, "Smart Money —Å–∏–≥–Ω–∞–ª –¥–ª—è BTCUSDT")
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É
    response = requests.get(f"{BASE_URL}/cache/stats")
    print_response(response, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É")

def test_error_handling():
    """–¢–µ—Å—Ç—É—î –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫"""
    print("\n‚ö†Ô∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø –û–ë–†–û–ë–ö–ò –ü–û–ú–ò–õ–û–ö")
    
    # 1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª
    response = requests.get(f"{BASE_URL}/signal/INVALID_SYMBOL")
    print_response(response, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª")
    
    # 2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É–≥–æ–¥–∏
    invalid_trade = {
        "symbol": "BTCUSDT",
        "side": "INVALID_SIDE",
        "quantity": -1,
        "price": 0,
        "account_balance": -1000
    }
    response = requests.post(f"{BASE_URL}/risk/validate-trade", json=invalid_trade)
    print_response(response, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —É–≥–æ–¥–∏")
    
    # 3. –ù–µ—ñ—Å–Ω—É—é—á–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç
    response = requests.get(f"{BASE_URL}/non-existent-endpoint")
    print_response(response, "–ù–µ—ñ—Å–Ω—É—é—á–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç")

def test_performance():
    """–¢–µ—Å—Ç—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å API"""
    print("\n‚ö° –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    
    import time
    
    # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É
    start_time = time.time()
    response = requests.get(f"{BASE_URL}/risk/metrics")
    end_time = time.time()
    
    print(f"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–≥—É–∫—É /risk/metrics: {(end_time - start_time)*1000:.2f}ms")
    print(f"Status: {response.status_code}")
    
    # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É–≥–æ–¥–∏
    start_time = time.time()
    trade_data = {
        "symbol": "BTCUSDT",
        "side": "BUY",
        "quantity": 0.01,
        "price": 45000.0,
        "account_balance": 10000.0
    }
    response = requests.post(f"{BASE_URL}/risk/validate-trade", json=trade_data)
    end_time = time.time()
    
    print(f"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–≥—É–∫—É /risk/validate-trade: {(end_time - start_time)*1000:.2f}ms")
    print(f"Status: {response.status_code}")

def generate_api_documentation():
    """–ì–µ–Ω–µ—Ä—É—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API"""
    print("\nüìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–Ü–Ø API")
    print("=" * 60)
    
    api_endpoints = [
        {
            "method": "GET",
            "endpoint": "/risk/metrics",
            "description": "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É",
            "parameters": "–ù–µ–º–∞—î",
            "response": "JSON –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ä–∏–∑–∏–∫—É"
        },
        {
            "method": "POST",
            "endpoint": "/risk/validate-trade",
            "description": "–í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–≥–æ–¥–∏",
            "parameters": "symbol, side, quantity, price, account_balance",
            "response": "JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"
        },
        {
            "method": "GET",
            "endpoint": "/risk/position-size/{symbol}",
            "description": "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó",
            "parameters": "entry_price, account_balance",
            "response": "JSON –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º"
        },
        {
            "method": "GET",
            "endpoint": "/risk/stop-loss/{symbol}",
            "description": "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Stop Loss",
            "parameters": "entry_price, side",
            "response": "JSON –∑ —Ü—ñ–Ω–æ—é Stop Loss"
        },
        {
            "method": "GET",
            "endpoint": "/risk/take-profit/{symbol}",
            "description": "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Take Profit",
            "parameters": "entry_price, side",
            "response": "JSON –∑ —Ü—ñ–Ω–æ—é Take Profit"
        },
        {
            "method": "GET",
            "endpoint": "/trading/status",
            "description": "–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞",
            "parameters": "–ù–µ–º–∞—î",
            "response": "JSON –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –¥–≤–∏–≥—É–Ω–∞"
        },
        {
            "method": "POST",
            "endpoint": "/trading/start",
            "description": "–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞",
            "parameters": "trading_pairs (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
            "response": "JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—É—Å–∫—É"
        },
        {
            "method": "POST",
            "endpoint": "/trading/stop",
            "description": "–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞",
            "parameters": "–ù–µ–º–∞—î",
            "response": "JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑—É–ø–∏–Ω–∫–∏"
        },
        {
            "method": "GET",
            "endpoint": "/monitoring/status",
            "description": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
            "parameters": "–ù–µ–º–∞—î",
            "response": "JSON –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º–∏"
        },
        {
            "method": "GET",
            "endpoint": "/monitoring/alerts",
            "description": "–Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å",
            "parameters": "hours (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24)",
            "response": "JSON –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Å–ø–æ–≤—ñ—â–µ–Ω—å"
        },
        {
            "method": "POST",
            "endpoint": "/monitoring/start",
            "description": "–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
            "parameters": "–ù–µ–º–∞—î",
            "response": "JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—É—Å–∫—É"
        },
        {
            "method": "POST",
            "endpoint": "/monitoring/stop",
            "description": "–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
            "parameters": "–ù–µ–º–∞—î",
            "response": "JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑—É–ø–∏–Ω–∫–∏"
        }
    ]
    
    for endpoint in api_endpoints:
        print(f"\nüîó {endpoint['method']} {endpoint['endpoint']}")
        print(f"üìù {endpoint['description']}")
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {endpoint['parameters']}")
        print(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {endpoint['response']}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üåê –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –°–ò–°–¢–ï–ú–ò –†–ò–ó–ò–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–£")
    print("=" * 60)
    print(f"‚è∞ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåç –ë–∞–∑–æ–≤–∏–π URL: {BASE_URL}")
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ API
        test_existing_api()
        test_risk_management_api()
        test_trading_engine_api()
        test_monitoring_api()
        test_error_handling()
        test_performance()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
        generate_api_documentation()
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"‚è∞ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        print("\nüìã –†–ï–ó–Æ–ú–ï:")
        print("‚Ä¢ –í—Å—ñ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        print("‚Ä¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞")
        print("‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞")
        print("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞")
        print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://localhost:8000")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
