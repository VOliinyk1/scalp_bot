#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
"""

import asyncio
import time
from datetime import datetime

from app.services.risk_management import get_risk_manager, RiskConfig
from app.services.trading_engine import get_trading_engine
from app.services.monitoring import get_monitoring_service
from app.risk_config import get_risk_config, validate_risk_config

def test_risk_configurations():
    """–¢–µ—Å—Ç—É—î —Ä—ñ–∑–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
    profiles = ["conservative", "default", "aggressive"]
    
    for profile in profiles:
        print(f"\nüìä –ü—Ä–æ—Ñ—ñ–ª—å: {profile.upper()}")
        config = get_risk_config(profile=profile)
        
        # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        is_valid, message = validate_risk_config(config)
        print(f"‚úÖ –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å: {is_valid} - {message}")
        
        # –í–∏–≤–æ–¥–∏–º–æ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {config.max_position_size_usdt} USDT")
        print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –µ–∫—Å–ø–æ–∑–∏—Ü—ñ—è: {config.max_total_exposure_usdt} USDT")
        print(f"   ‚Ä¢ –î–µ–Ω–Ω–∏–π –∑–±–∏—Ç–æ–∫: {config.max_daily_loss_usdt} USDT")
        print(f"   ‚Ä¢ –ü—Ä–æ—Å–∞–¥–∫–∞: {config.max_drawdown_percent}%")
        print(f"   ‚Ä¢ Stop Loss: {config.stop_loss_percent}%")
        print(f"   ‚Ä¢ Take Profit: {config.take_profit_percent}%")
        print(f"   ‚Ä¢ –†–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É: {config.max_risk_per_trade_percent}%")

def test_trade_validation():
    """–¢–µ—Å—Ç—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —É–≥–æ–¥"""
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É–≥–æ–¥")
    print("=" * 50)
    
    risk_manager = get_risk_manager()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —É–≥–æ–¥–∏
    test_trades = [
        {
            "symbol": "BTCUSDT",
            "side": "BUY",
            "quantity": 0.01,
            "price": 45000.0,
            "balance": 10000.0,
            "description": "–ù–æ—Ä–º–∞–ª—å–Ω–∞ —É–≥–æ–¥–∞ BTC"
        },
        {
            "symbol": "BTCUSDT",
            "side": "BUY",
            "quantity": 1.0,
            "price": 45000.0,
            "balance": 10000.0,
            "description": "–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ –ø–æ–∑–∏—Ü—ñ—è"
        },
        {
            "symbol": "ETHUSDT",
            "side": "SELL",
            "quantity": 0.1,
            "price": 3000.0,
            "balance": 5000.0,
            "description": "–ù–æ—Ä–º–∞–ª—å–Ω–∞ —É–≥–æ–¥–∞ ETH"
        }
    ]
    
    for trade in test_trades:
        print(f"\nüìà {trade['description']}")
        is_valid, reason = risk_manager.validate_trade(
            trade["symbol"],
            trade["side"],
            trade["quantity"],
            trade["price"],
            trade["balance"]
        )
        
        status = "‚úÖ –î–û–ó–í–û–õ–ï–ù–û" if is_valid else "‚ùå –í–Ü–î–•–ò–õ–ï–ù–û"
        print(f"   {status}: {reason}")
        print(f"   ‚Ä¢ –°–∏–º–≤–æ–ª: {trade['symbol']}")
        print(f"   ‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {trade['side']}")
        print(f"   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {trade['quantity']}")
        print(f"   ‚Ä¢ –¶—ñ–Ω–∞: {trade['price']} USDT")
        print(f"   ‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó: {trade['quantity'] * trade['price']:.2f} USDT")

def test_position_sizing():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø–æ–∑–∏—Ü—ñ–π"""
    print("\nüìè –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø–æ–∑–∏—Ü—ñ–π")
    print("=" * 50)
    
    risk_manager = get_risk_manager()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    scenarios = [
        {
            "symbol": "BTCUSDT",
            "entry_price": 45000.0,
            "balance": 10000.0,
            "description": "BTC –∑ –±–∞–ª–∞–Ω—Å–æ–º 10,000 USDT"
        },
        {
            "symbol": "ETHUSDT",
            "entry_price": 3000.0,
            "balance": 5000.0,
            "description": "ETH –∑ –±–∞–ª–∞–Ω—Å–æ–º 5,000 USDT"
        },
        {
            "symbol": "BNBUSDT",
            "entry_price": 300.0,
            "balance": 2000.0,
            "description": "BNB –∑ –±–∞–ª–∞–Ω—Å–æ–º 2,000 USDT"
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüí∞ {scenario['description']}")
        quantity = risk_manager.calculate_position_size(
            scenario["symbol"],
            scenario["entry_price"],
            scenario["balance"]
        )
        
        position_value = quantity * scenario["entry_price"]
        risk_amount = scenario["balance"] * (risk_manager.config.max_risk_per_trade_percent / 100)
        
        print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity:.8f}")
        print(f"   ‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó: {position_value:.2f} USDT")
        print(f"   ‚Ä¢ –†–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É: {risk_amount:.2f} USDT")
        print(f"   ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É: {(position_value / scenario['balance']) * 100:.2f}%")

def test_stop_loss_take_profit():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Stop Loss —Ç–∞ Take Profit"""
    print("\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Stop Loss —Ç–∞ Take Profit")
    print("=" * 50)
    
    risk_manager = get_risk_manager()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    scenarios = [
        {
            "symbol": "BTCUSDT",
            "entry_price": 45000.0,
            "side": "BUY",
            "description": "Long –ø–æ–∑–∏—Ü—ñ—è BTC"
        },
        {
            "symbol": "ETHUSDT",
            "entry_price": 3000.0,
            "side": "SELL",
            "description": "Short –ø–æ–∑–∏—Ü—ñ—è ETH"
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìä {scenario['description']}")
        
        stop_loss = risk_manager.calculate_stop_loss_price(
            scenario["symbol"],
            scenario["entry_price"],
            scenario["side"]
        )
        
        take_profit = risk_manager.calculate_take_profit_price(
            scenario["symbol"],
            scenario["entry_price"],
            scenario["side"]
        )
        
        print(f"   ‚Ä¢ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {scenario['entry_price']:.2f} USDT")
        print(f"   ‚Ä¢ Stop Loss: {stop_loss:.2f} USDT")
        print(f"   ‚Ä¢ Take Profit: {take_profit:.2f} USDT")
        
        if scenario["side"] == "BUY":
            sl_percent = ((scenario["entry_price"] - stop_loss) / scenario["entry_price"]) * 100
            tp_percent = ((take_profit - scenario["entry_price"]) / scenario["entry_price"]) * 100
        else:
            sl_percent = ((stop_loss - scenario["entry_price"]) / scenario["entry_price"]) * 100
            tp_percent = ((scenario["entry_price"] - take_profit) / scenario["entry_price"]) * 100
        
        print(f"   ‚Ä¢ Stop Loss: {sl_percent:.2f}%")
        print(f"   ‚Ä¢ Take Profit: {tp_percent:.2f}%")

def test_risk_metrics():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É"""
    print("\nüìà –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É")
    print("=" * 50)
    
    risk_manager = get_risk_manager()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    metrics = risk_manager.get_risk_metrics()
    
    print(f"üìä –ü–æ—Ç–æ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏–∑–∏–∫—É:")
    print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –µ–∫—Å–ø–æ–∑–∏—Ü—ñ—è: {metrics.total_exposure:.2f} USDT")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.max_drawdown:.2f}%")
    print(f"   ‚Ä¢ Win Rate: {metrics.win_rate:.1%}")
    print(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: {metrics.avg_win:.2f} USDT")
    print(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –∑–±–∏—Ç–æ–∫: {metrics.avg_loss:.2f} USDT")
    print(f"   ‚Ä¢ –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞: {metrics.sharpe_ratio:.2f}")
    print(f"   ‚Ä¢ –î–µ–Ω–Ω–∏–π P&L: {metrics.daily_pnl:.2f} USDT")
    print(f"   ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {metrics.volatility:.4f}")

def test_volatility_liquidity():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ")
    print("=" * 50)
    
    risk_manager = get_risk_manager()
    
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
    
    for symbol in symbols:
        print(f"\nüîç {symbol}")
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
        volatility = risk_manager._get_symbol_volatility(symbol)
        print(f"   ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {volatility:.4f}")
        
        # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
        liquidity = risk_manager._get_symbol_liquidity(symbol)
        print(f"   ‚Ä¢ –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {liquidity:,.0f} USDT")
        
        # –û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—É
        if volatility > risk_manager.config.max_volatility_threshold:
            print(f"   ‚ö†Ô∏è  –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å!")
        
        if liquidity < risk_manager.config.min_liquidity_usdt:
            print(f"   ‚ö†Ô∏è  –ù–∏–∑—å–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å!")

async def test_trading_engine():
    """–¢–µ—Å—Ç—É—î —Ç–æ—Ä–≥–æ–≤–∏–π –¥–≤–∏–≥—É–Ω"""
    print("\nüöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞")
    print("=" * 50)
    
    trading_engine = get_trading_engine()
    
    print("üìä –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–≥—É–Ω–∞:")
    print(f"   ‚Ä¢ –ó–∞–ø—É—â–µ–Ω–∏–π: {trading_engine.is_running}")
    print(f"   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏: {trading_engine.trading_pairs}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏: {len(trading_engine.active_orders)}")
    print(f"   ‚Ä¢ –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç—É: {trading_engine.account_balance:.2f} USDT")

async def test_monitoring():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    print("\nüëÅÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
    print("=" * 50)
    
    monitoring_service = get_monitoring_service()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
    status = monitoring_service.get_system_status()
    
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:")
    print(f"   ‚Ä¢ –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {status.get('risk_level', 'N/A')}")
    print(f"   ‚Ä¢ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {status.get('uptime', 'N/A')}")
    print(f"   ‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {status.get('last_check', 'N/A')}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω—å
    alerts = monitoring_service.get_alert_history(hours=1)
    print(f"   ‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É: {len(alerts)}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –†–ò–ó–ò–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–£")
    print("=" * 60)
    print(f"‚è∞ –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    test_risk_configurations()
    test_trade_validation()
    test_position_sizing()
    test_stop_loss_take_profit()
    test_risk_metrics()
    test_volatility_liquidity()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ç–µ—Å—Ç–∏
    asyncio.run(test_trading_engine())
    asyncio.run(test_monitoring())
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"‚è∞ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    print("\nüìã –†–ï–ó–Æ–ú–ï:")
    print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
    print("‚Ä¢ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ")
    print("‚Ä¢ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ")
    print("‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
    print("‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Ç–æ—Ä–≥–æ–≤–∏–º –±–æ—Ç–æ–º")

if __name__ == "__main__":
    main()
